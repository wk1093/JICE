
# jice_compile(testproject)
# ->
# mkdir -p testproject/build
# python3 {CURRENT_DIR}/main.py testproject testproject/build

# working on a new version of the jicc compiler written in C++ instead of python
set(CMAKE_CXX_STANDARD 17)

FetchContent_Declare(
        nlohmann_json
        GIT_REPOSITORY https://github.com/nlohmann/json.git
        GIT_TAG        master
)
set(JSON_BuildTests OFF CACHE INTERNAL "")
FetchContent_MakeAvailable(nlohmann_json)

add_executable(jicc src/main.cpp)
target_link_libraries(jicc nlohmann_json)

# if this target was skipped (because it was already built), we need to get the location of the executable, otherwise we need to advise the user to re-run CMake


#function(jice_compile_old directory)
#    # This needs to run RIGHT NOW, before any other configuration, because later configuration (the project) needs the files generated by this command
#    execute_process(
#            COMMAND python3 ${CMAKE_CURRENT_FUNCTION_LIST_DIR}/main.py ${directory} ${directory}/build
#    )
#    # This also needs to run on build, so that the files are generated before the build
#    # we make it so this command is always out of date, and is required by the project build
#    file(GLOB_RECURSE depends ${directory}/*.json ${directory}/*.cpp)
#    add_custom_command(
#            OUTPUT ${directory}/build
#            OUTPUT ${directory}/build/main.cpp
#            OUTPUT ${directory}/build/CMakeLists.txt
#            OUTPUT ${directory}/build/__fake_file__.h # always out of date
#            COMMAND python3 ${CMAKE_CURRENT_FUNCTION_LIST_DIR}/main.py ${directory} ${directory}/build
#            DEPENDS ${directory}/proj.json
#            DEPENDS ${depends}
#            COMMENT "Generating project files for ${directory}"
#    )
#    add_subdirectory(${directory}/build jice_build)
#endfunction()

function(jice_compile directory)
    execute_process(
            COMMAND jicc ${directory} ${directory}/build
    )
    execute_process(
            COMMAND echo TEST 1>&2
    )
    message("Generating project files for ${directory}")

    file(GLOB_RECURSE depends ${directory}/*.json ${directory}/*.cpp)
    add_custom_command(
            OUTPUT ${directory}/build
            OUTPUT ${directory}/build/main.cpp
            OUTPUT ${directory}/build/CMakeLists.txt
            OUTPUT ${directory}/build/__fake_file__.h # always out of date
            COMMAND jicc
            ARGS ${directory} ${directory}/build
            DEPENDS ${directory}/proj.json
            DEPENDS ${depends}
            COMMENT "Generating project files for ${directory}"
            PRE_BUILD
    )
    add_subdirectory(${directory}/build jice_build)
endfunction()